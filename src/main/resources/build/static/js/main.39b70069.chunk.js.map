{"version":3,"sources":["site/Home.js","site/auth/Login.js","site/auth/Register.js","site/Dyslexia.js","site/App.js","serviceWorker.js","index.js"],"names":["Home","React","Component","Login","Register","Dyslexia","props","state","dyslexia","toggleDyslexia","bind","this","setState","prevState","className","onClick","App","exact","path","component","Child","to","id","match","params","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAEaA,EAAb,4JAEI,WACI,OACI,8BACI,uDALhB,GAA0BC,IAAMC,WCAnBC,EAAb,4JAEI,WACI,OACI,4BAJZ,GAA2BF,IAAMC,WCApBE,EAAb,4JAEI,WACI,OACI,8BACI,uDALhB,GAA8BH,IAAMC,W,QCAvBG,EAAb,kDAEI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,UAAU,GAGd,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAPP,EAFvB,kDAYI,WACIC,KAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBL,UAAWK,EAAUL,eAdjC,oBAkBI,WACI,OACI,gCACI,mBAAGM,UAAWH,KAAKJ,MAAMC,SAAW,gBAAkB,GAAtD,yCAIA,wBAAQO,QAAUJ,KAAKF,eAAvB,oCAzBhB,GAA8BR,IAAMC,WCSvBc,EAAb,4JACI,WACI,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IAEjC,cAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,SAASC,UAAWhB,IACtC,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,YAAYC,UAAWf,IAEzC,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,YAAYC,UAAWC,IACzC,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,gBAAgBC,UAAWC,IAE7C,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,yBAAyBC,UAAWC,IACtD,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,6BAA6BC,UAAWC,IAG1D,cAAC,IAAD,CAAOF,KAAK,YAAZ,SACI,cAAC,EAAD,MAGJ,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACI,gCACI,iEACA,cAAC,IAAD,CAAMG,GAAG,IAAT,sDAxB5B,GAAyBpB,IAAMC,WAiClBkB,EAAb,kDAEI,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTe,GAAI,EAAKhB,MAAMiB,MAAMC,OAAOF,IAJjB,EAFvB,0CAUI,WACI,OACI,qCAAQX,KAAKJ,MAAMe,UAZ/B,GAA2BrB,IAAMC,WChCbuB,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACrB,2DCZRM,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.39b70069.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Home extends React.Component {\n\n    render() {\n        return(\n            <div>\n                <p>\n                    This is the body\n                </p>\n            </div>\n        );\n    }\n\n}\n","import React from 'react';\n\nexport class Login extends React.Component {\n\n    render() {\n        return(\n            <div>\n\n            </div>\n        );\n    }\n\n}\n","import React from 'react';\n\nexport class Register extends React.Component {\n\n    render() {\n        return(\n            <div>\n                <p>\n                    This is the body\n                </p>\n            </div>\n        );\n    }\n\n}\n","import React from 'react';\n\nexport class Dyslexia extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dyslexia: false\n        };\n\n        this.toggleDyslexia = this.toggleDyslexia.bind(this);\n    }\n\n    toggleDyslexia() {\n        this.setState(prevState => ({\n            dyslexia: !prevState.dyslexia\n        }));\n    }\n\n    render() {\n        return(\n            <div>\n                <p className={this.state.dyslexia ? 'dyslexia-font' : ''}>\n                    Test I am testing very much\n                </p>\n\n                <button onClick={ this.toggleDyslexia }>\n                    Toggle dyslexia\n                </button>\n            </div>\n        );\n    }\n\n}\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport { Home } from './Home';\nimport { Login, Register } from './auth/Auth';\nimport { Dyslexia } from './Dyslexia';\n\nexport class App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/login\" component={Login} />\n                    <Route exact path=\"/register\" component={Register} />\n\n                    <Route exact path=\"/subjects\" component={Child} />\n                    <Route exact path=\"/subjects/:id\" component={Child} />\n\n                    <Route exact path=\"/subjects/:id/chapters\" component={Child} />\n                    <Route exact path=\"/subjects/:id/chapters/:id\" component={Child} />\n\n                    {/* Dyslexia test */}\n                    <Route path=\"/dyslexia\">\n                        <Dyslexia/>\n                    </Route>\n\n                    <Route path=\"*\">\n                        <div>\n                            <h1>Whoops, I can't find this page!</h1>\n                            <Link to=\"/\">Get back to the home page.</Link>\n                        </div>\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport class Child extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: this.props.match.params.id\n        };\n    }\n\n    render() {\n        return (\n            <p>ID: {this.state.id}</p>\n        );\n    }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './site/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}